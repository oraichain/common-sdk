diff --git a/packages/contracts-sdk/src/Cw3FixedMultisig.client.ts b/packages/contracts-sdk/src/Cw3FixedMultisig.client.ts
index caee46a..5548729 100644
--- a/packages/contracts-sdk/src/Cw3FixedMultisig.client.ts
+++ b/packages/contracts-sdk/src/Cw3FixedMultisig.client.ts
@@ -30,7 +30,7 @@ export interface Cw3FixedMultisigReadOnlyInterface {
     limit?: number;
     startBefore?: number;
   }) => Promise<ProposalListResponseForEmpty>;
-  vote: ({
+  getVote: ({
     proposalId,
     voter
   }: {
@@ -70,7 +70,7 @@ export class Cw3FixedMultisigQueryClient implements Cw3FixedMultisigReadOnlyInte
     this.proposal = this.proposal.bind(this);
     this.listProposals = this.listProposals.bind(this);
     this.reverseProposals = this.reverseProposals.bind(this);
-    this.vote = this.vote.bind(this);
+    this.getVote = this.getVote.bind(this);
     this.listVotes = this.listVotes.bind(this);
     this.voter = this.voter.bind(this);
     this.listVoters = this.listVoters.bind(this);
@@ -120,7 +120,7 @@ export class Cw3FixedMultisigQueryClient implements Cw3FixedMultisigReadOnlyInte
       }
     });
   };
-  vote = async ({
+  getVote = async ({
     proposalId,
     voter
   }: {
diff --git a/packages/contracts-sdk/src/Cw3FlexMultisig.client.ts b/packages/contracts-sdk/src/Cw3FlexMultisig.client.ts
index 4b90997..70f70fb 100644
--- a/packages/contracts-sdk/src/Cw3FlexMultisig.client.ts
+++ b/packages/contracts-sdk/src/Cw3FlexMultisig.client.ts
@@ -30,7 +30,7 @@ export interface Cw3FlexMultisigReadOnlyInterface {
     limit?: number;
     startBefore?: number;
   }) => Promise<ProposalListResponseForEmpty>;
-  vote: ({
+  getVote: ({
     proposalId,
     voter
   }: {
@@ -71,7 +71,7 @@ export class Cw3FlexMultisigQueryClient implements Cw3FlexMultisigReadOnlyInterf
     this.proposal = this.proposal.bind(this);
     this.listProposals = this.listProposals.bind(this);
     this.reverseProposals = this.reverseProposals.bind(this);
-    this.vote = this.vote.bind(this);
+    this.getVote = this.getVote.bind(this);
     this.listVotes = this.listVotes.bind(this);
     this.voter = this.voter.bind(this);
     this.listVoters = this.listVoters.bind(this);
@@ -122,7 +122,7 @@ export class Cw3FlexMultisigQueryClient implements Cw3FlexMultisigReadOnlyInterf
       }
     });
   };
-  vote = async ({
+  getVote = async ({
     proposalId,
     voter
   }: {
diff --git a/packages/contracts-sdk/src/Cw721Base.client.ts b/packages/contracts-sdk/src/Cw721Base.client.ts
index 37c26b1..c94fbac 100644
--- a/packages/contracts-sdk/src/Cw721Base.client.ts
+++ b/packages/contracts-sdk/src/Cw721Base.client.ts
@@ -84,7 +84,7 @@ export interface Cw721BaseReadOnlyInterface {
     startAfter?: string;
   }) => Promise<TokensResponse>;
   minter: () => Promise<MinterResponse>;
-  extension: ({
+  getExtension: ({
     msg
   }: {
     msg: Empty;
@@ -110,7 +110,7 @@ export class Cw721BaseQueryClient implements Cw721BaseReadOnlyInterface {
     this.tokens = this.tokens.bind(this);
     this.allTokens = this.allTokens.bind(this);
     this.minter = this.minter.bind(this);
-    this.extension = this.extension.bind(this);
+    this.getExtension = this.getExtension.bind(this);
     this.ownership = this.ownership.bind(this);
   }
 
@@ -267,7 +267,7 @@ export class Cw721BaseQueryClient implements Cw721BaseReadOnlyInterface {
       minter: {}
     });
   };
-  extension = async ({
+  getExtension = async ({
     msg
   }: {
     msg: Empty;
diff --git a/packages/contracts-sdk/src/types.ts b/packages/contracts-sdk/src/types.ts
index f0c883b..0f9c46b 100644
--- a/packages/contracts-sdk/src/types.ts
+++ b/packages/contracts-sdk/src/types.ts
@@ -445,4 +445,42 @@ export interface ContractVersion {
   contract: string;
   version: string;
 }
+export interface NonFungibleTokenPacketData {
+  /**
+   * Optional base64 encoded field which contains on-chain metadata about the NFT class. Must be non-empty if provided.
+   */
+  classData?: Binary | null
+  /**
+   * Uniquely identifies the collection which the tokens being transfered belong to on the sending chain. Must be non-empty.
+   */
+  classId: ClassId
+  /**
+   * Optional URL that points to metadata about the collection. Must be non-empty if provided.
+   */
+  classUri?: string | null
+  /**
+   * Memo to add custom string to the msg
+   */
+  memo?: string | null
+  /**
+   * The address that should receive the tokens on the receiving chain.
+   */
+  receiver: string
+  /**
+   * The address sending the tokens on the sending chain.
+   */
+  sender: string
+  /**
+   * Optional base64 encoded metadata for the tokens being transfered. `tokenData[N]` should hold metadata for `tokenIds[N]` and both lists should have the same length if provided. Must be non-empty if provided.
+   */
+  tokenData?: Binary[] | null
+  /**
+   * Uniquely identifies the tokens in the NFT collection being transfered. This MUST be non-empty.
+   */
+  tokenIds: TokenId[]
+  /**
+   * Optional URL that points to metadata for each token being transfered. `tokenUris[N]` should hold the metadata for `tokenIds[N]` and both lists should have the same if provided. Must be non-empty if provided.
+   */
+  tokenUris?: string[] | null
+}
 export { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
\ No newline at end of file
