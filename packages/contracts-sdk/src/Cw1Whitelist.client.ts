/**
* This file was automatically generated by @oraichain/ts-codegen@0.35.8.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @oraichain/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import {CosmosMsgForEmpty, BankMsg, Uint128, StakingMsg, DistributionMsg, Binary, IbcMsg, Timestamp, Uint64, WasmMsg, GovMsg, VoteOption, Coin, Empty, IbcTimeout, IbcTimeoutBlock} from "./types";
import {InstantiateMsg, ExecuteMsg, QueryMsg, AdminListResponse, CanExecuteResponse} from "./Cw1Whitelist.types";
export interface Cw1WhitelistReadOnlyInterface {
  contractAddress: string;
  adminList: () => Promise<AdminListResponse>;
  canExecute: ({
    msg,
    sender
  }: {
    msg: CosmosMsgForEmpty;
    sender: string;
  }) => Promise<CanExecuteResponse>;
}
export class Cw1WhitelistQueryClient implements Cw1WhitelistReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.adminList = this.adminList.bind(this);
    this.canExecute = this.canExecute.bind(this);
  }

  adminList = async (): Promise<AdminListResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      admin_list: {}
    });
  };
  canExecute = async ({
    msg,
    sender
  }: {
    msg: CosmosMsgForEmpty;
    sender: string;
  }): Promise<CanExecuteResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      can_execute: {
        msg,
        sender
      }
    });
  };
}
export interface Cw1WhitelistInterface extends Cw1WhitelistReadOnlyInterface {
  contractAddress: string;
  sender: string;
  execute: ({
    msgs
  }: {
    msgs: CosmosMsgForEmpty[];
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  freeze: (_fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateAdmins: ({
    admins
  }: {
    admins: string[];
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class Cw1WhitelistClient extends Cw1WhitelistQueryClient implements Cw1WhitelistInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.execute = this.execute.bind(this);
    this.freeze = this.freeze.bind(this);
    this.updateAdmins = this.updateAdmins.bind(this);
  }

  execute = async ({
    msgs
  }: {
    msgs: CosmosMsgForEmpty[];
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      execute: {
        msgs
      }
    }, _fee, _memo, _funds);
  };
  freeze = async (_fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      freeze: {}
    }, _fee, _memo, _funds);
  };
  updateAdmins = async ({
    admins
  }: {
    admins: string[];
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_admins: {
        admins
      }
    }, _fee, _memo, _funds);
  };
}